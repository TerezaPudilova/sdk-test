"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const businessIntelligence_1 = require("./api/businessIntelligence");
const management_1 = require("./api/management");
const solver_1 = require("./api/solver");
const utils_1 = require("./utils/utils");
class DecisionRules {
    constructor(options) {
        this.management = {
            getRule: (ruleId, version) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.getRuleAPI)(this.options, ruleId, version);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            updateRuleStatus: (ruleId, status, version) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.updateRuleStatusAPI)(this.options, ruleId, status, version);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            updateRule: (ruleId, rule, version) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.updateRuleAPI)(this.options, ruleId, rule, version);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            createRule: (rule) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.createRuleAPI)(this.options, rule);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            deleteRule: (ruleId, version) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.deleteRuleAPI)(this.options, ruleId, version);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            getRulesForSpace: () => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.getRulesForSpaceAPI)(this.options);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            getTags: (tags) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.getTagsAPI)(this.options, tags);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            updateTags: (ruleId, tags, version) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.updateTagsAPI)(this.options, ruleId, tags, version);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            deleteTags: (ruleId, tags, version) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.deleteTagsAPI)(this.options, ruleId, tags, version);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            exportFolder: (nodeId) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.exportFolderAPI)(this.options, nodeId);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            importFolder: (targetNodeid) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.exportFolderAPI)(this.options, targetNodeid);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            findDuplicates: (ruleId, version) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.findDuplicatesAPI)(this.options, ruleId, version);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            findDependencies: (ruleId, version) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.findDependenciesAPI)(this.options, ruleId, version);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            lockRule: (ruleId, data, version) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, management_1.lockRuleAPI)(this.options, ruleId, data, version);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            })
        };
        this.bi = {
            getAuditLogs: (auditLogsOpts) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, businessIntelligence_1.getAuditLogsAPI)(this.options, auditLogsOpts);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            }),
            deleteAuditLogs: (auditLogsOpts) => __awaiter(this, void 0, void 0, function* () {
                try {
                    return yield (0, businessIntelligence_1.deleteAuditLogsAPI)(this.options, auditLogsOpts);
                }
                catch (e) {
                    throw (0, utils_1.handleError)(e);
                }
            })
        };
        this.options = options;
    }
    solve(ruleId, data, version, solverOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield (0, solver_1.solveRule)(this.options, ruleId, data, version, solverOptions);
            }
            catch (e) {
                throw (0, utils_1.handleError)(e);
            }
        });
    }
}
exports.default = DecisionRules;
//# sourceMappingURL=decisionrules.js.map