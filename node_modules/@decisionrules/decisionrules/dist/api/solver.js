"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testPack = exports.solveRule = void 0;
const axios_1 = require("axios");
const httpClient_1 = require("../utils/httpClient");
const utils_1 = require("../utils/utils");
const enums_1 = require("../defs/enums");
const MODE = enums_1.SdkMode.API;
function solveRule(options, ruleId, input, version, solverOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const url = createUrl(options, ruleId, version);
            const body = createBody(input, solverOptions);
            const headers = createHeaders(options, solverOptions);
            const response = yield (0, httpClient_1.doCall)(url, headers, "POST", body);
            return response.data;
        }
        catch (e) {
            throw e;
        }
    });
}
exports.solveRule = solveRule;
function createBody(input, solverOptions) {
    const body = {
        data: input
    };
    if (solverOptions === null || solverOptions === void 0 ? void 0 : solverOptions.cols) {
        body.options = solverOptions.cols;
    }
    return body;
}
function createUrl(options, ruleId, version) {
    let url = `/rule/solve/${ruleId}/`;
    if (version) {
        url += version;
    }
    try {
        return new URL(url, (0, utils_1.getBaseURL)(options.host, MODE));
    }
    catch (e) {
        throw e;
    }
}
function createHeaders(options, solverOptions) {
    var _a, _b, _c;
    const headers = new axios_1.AxiosHeaders();
    try {
        headers.set("Content-Type", "application/json");
        if (options === null || options === void 0 ? void 0 : options.solverKey) {
            headers.set("Authorization", `Bearer ${options.solverKey}`);
        }
        else {
            throw Error("Solver key missing.");
        }
        headers.set("X-Debug", new String((_a = solverOptions === null || solverOptions === void 0 ? void 0 : solverOptions.debug) !== null && _a !== void 0 ? _a : false).valueOf());
        if (solverOptions === null || solverOptions === void 0 ? void 0 : solverOptions.corrId) {
            headers.set("X-Correlation-Id", solverOptions.corrId);
        }
        headers.set("X-Strategy", (_b = solverOptions === null || solverOptions === void 0 ? void 0 : solverOptions.strategy) !== null && _b !== void 0 ? _b : "STANDARD");
        headers.set("X-Audit", new String((_c = solverOptions === null || solverOptions === void 0 ? void 0 : solverOptions.audit) !== null && _c !== void 0 ? _c : false).valueOf());
        if (solverOptions === null || solverOptions === void 0 ? void 0 : solverOptions.auditTtl) {
            headers.set("X-Audit-Ttl", solverOptions.auditTtl.toString());
        }
        return headers;
    }
    catch (e) {
        throw e;
    }
}
exports.testPack = {
    createUrl,
    createBody,
    createHeaders,
    getBaseURL: utils_1.getBaseURL
};
//# sourceMappingURL=solver.js.map