"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testPack = exports.deleteAuditLogsAPI = exports.getAuditLogsAPI = void 0;
const enums_1 = require("../defs/enums");
const utils_1 = require("../utils/utils");
const utils_2 = require("../utils/utils");
const httpClient_1 = require("../utils/httpClient");
const MODE = enums_1.SdkMode.AUDIT;
function createUrl(host, auditOpt) {
    const baseURL = (0, utils_2.getBaseURL)(host, MODE);
    let optString = "/audit/?";
    for (let [opt, value] of Object.entries(auditOpt)) {
        if (Array.isArray(value)) {
            value = value.join();
        }
        optString += `${opt}=${value}&`;
    }
    try {
        return new URL(optString, baseURL);
    }
    catch (e) {
        throw e;
    }
}
function getAuditLogsAPI(options, auditOpt) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const headers = (0, utils_1.createHeaders)(options.businessIntKey);
            const url = createUrl(options.host, auditOpt);
            const response = yield (0, httpClient_1.doCall)(url, headers, "GET");
            return response.data;
        }
        catch (e) {
            throw e;
        }
    });
}
exports.getAuditLogsAPI = getAuditLogsAPI;
function deleteAuditLogsAPI(options, auditOpt) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const headers = (0, utils_1.createHeaders)(options.businessIntKey);
            const url = createUrl(options.host, auditOpt);
            const response = yield (0, httpClient_1.doCall)(url, headers, "DELETE");
            return response.data;
        }
        catch (e) {
            throw e;
        }
    });
}
exports.deleteAuditLogsAPI = deleteAuditLogsAPI;
exports.testPack = {
    createHeaders: utils_1.createHeaders,
    getBaseURL: utils_2.getBaseURL,
    createUrl
};
//# sourceMappingURL=businessIntelligence.js.map