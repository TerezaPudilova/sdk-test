import { DecisionRulesAuditOpt, DecisionRulesOptions } from "./defs/models";
import { SolverOptions } from "./defs/models";
export default class DecisionRules {
    private readonly options;
    constructor(options: DecisionRulesOptions);
    solve(ruleId: string, data: any, version?: string, solverOptions?: SolverOptions): Promise<any>;
    management: {
        getRule: (ruleId: string, version?: string) => Promise<any>;
        updateRuleStatus: (ruleId: string, status: string, version?: string) => Promise<any>;
        updateRule: (ruleId: string, rule: any, version?: string) => Promise<any>;
        createRule: (rule: any) => Promise<any>;
        deleteRule: (ruleId: string, version?: string) => Promise<any>;
        getRulesForSpace: () => Promise<any>;
        getTags: (tags: string[]) => Promise<any>;
        updateTags: (ruleId: string, tags: string[], version?: string) => Promise<any>;
        deleteTags: (ruleId: string, tags: string[], version?: string) => Promise<any>;
        exportFolder: (nodeId: string) => Promise<any>;
        importFolder: (targetNodeid: string) => Promise<any>;
        findDuplicates: (ruleId: string, version?: string) => Promise<any>;
        findDependencies: (ruleId: string, version?: string) => Promise<any>;
        lockRule: (ruleId: string, data: any, version?: string) => Promise<any>;
    };
    bi: {
        getAuditLogs: (auditLogsOpts: DecisionRulesAuditOpt) => Promise<any>;
        deleteAuditLogs: (auditLogsOpts: DecisionRulesAuditOpt) => Promise<any>;
    };
}
