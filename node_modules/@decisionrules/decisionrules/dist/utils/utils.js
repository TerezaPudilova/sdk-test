"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleError = exports.createHeaders = exports.getMap = exports.getBaseURL = void 0;
const enums_1 = require("../defs/enums");
const maps_1 = require("./maps");
const axios_1 = require("axios");
const DecisionRulesException_1 = require("../exceptions/DecisionRulesException");
function getBaseURL(host, mode) {
    let baseUrl = "";
    const urlMap = getMap(mode);
    switch (host) {
        case enums_1.HostEnum.GLOBAL_CLOUD:
            baseUrl = urlMap.get(host);
            break;
        case enums_1.HostEnum.REGION_EU:
            baseUrl = urlMap.get(host);
            break;
        case enums_1.HostEnum.REGION_US:
            baseUrl = urlMap.get(host);
            break;
        case enums_1.HostEnum.REGION_AU:
            baseUrl = urlMap.get(host);
            break;
        default:
            baseUrl = host;
            break;
    }
    if (!baseUrl) {
        throw Error("Failed to get base URL");
    }
    return baseUrl;
}
exports.getBaseURL = getBaseURL;
function getMap(mode) {
    let urlMap;
    switch (mode) {
        case enums_1.SdkMode.API:
            urlMap = maps_1.apiMap;
            break;
        case enums_1.SdkMode.AUDIT:
            urlMap = maps_1.biMap;
            break;
    }
    return urlMap;
}
exports.getMap = getMap;
function createHeaders(key) {
    try {
        const headers = new axios_1.AxiosHeaders();
        headers.set("Content-Type", "application/json");
        if (key) {
            headers.set("Authorization", `Bearer ${key}`);
        }
        return headers;
    }
    catch (e) {
        throw e;
    }
}
exports.createHeaders = createHeaders;
function handleError(e) {
    if (!(e === null || e === void 0 ? void 0 : e.response)) {
        throw new DecisionRulesException_1.DecisionRulesErrorException(e.message, e.stack);
    }
    throw new DecisionRulesException_1.DecisionRulesErrorException(`Call ended with status:${e.response.status}`, e.response.data);
}
exports.handleError = handleError;
//# sourceMappingURL=utils.js.map